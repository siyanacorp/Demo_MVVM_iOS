included:
    - Source
    - Tests
excluded:
    - Carthage
    - Pods
    - Source/ExcludedFolder
    - Source/ExcludedFile.swift
    - SwiftLint/Common/3rdPartyLib
    - Tests/SwiftLintFrameworkTests/Resources
analyzer_rules:
    - unused_declaration
    - unused_import
opt_in_rules:
    - anyobject_protocol
    - array_init
    - attributes
    - closure_end_indentation
    - closure_spacing
    - collection_alignment
    - contains_over_filter_count
    - contains_over_filter_is_empty
    - contains_over_first_not_nil
    - contains_over_range_nil_comparison
    - discouraged_none_name
    - discouraged_object_literal
    - empty_collection_literal
    - empty_count
    - empty_string
    - empty_xctest_method
    - enum_case_associated_values_count
    - explicit_init
    - extension_access_modifier
    - fallthrough
    - fatal_error_message
    - file_header
    - file_name
    - first_where
    - flatmap_over_map_reduce
    - identical_operands
    - joined_default_parameter
    - last_where
    - legacy_multiple
    - legacy_random
    - literal_expression_end_indentation
    - lower_acl_than_parent
    - modifier_order
    - nimble_operator
    - nslocalizedstring_key
    - number_separator
    - object_literal
    - operator_usage_whitespace
    - overridden_super_call
    - override_in_extension
    - pattern_matching_keywords
    - prefer_self_type_over_type_of_self
    - private_action
    - private_outlet
    - prohibited_interface_builder
    - prohibited_super_call
    - quick_discouraged_call
    - quick_discouraged_focused_test
    - quick_discouraged_pending_test
    - reduce_into
    - redundant_nil_coalescing
    - redundant_type_annotation
    - single_test_class
    - sorted_first_last
    - sorted_imports
    - static_operator
    - strong_iboutlet
    - test_case_accessibility
    - toggle_bool
    - unavailable_function
    - unneeded_parentheses_in_closure_argument
    - unowned_variable_capture
    - untyped_error_in_catch
    - vertical_parameter_alignment_on_call
    - vertical_whitespace_closing_braces
    - vertical_whitespace_opening_braces
    - xct_specific_matcher
    - yoda_condition

identifier_name:
    min_length: # only min_length
    error: 4 # only error
    excluded:
    - id
    - URL
    - GlobalAPIKey
number_separator:
    minimum_length: 5
file_name:
    excluded:
    - main.swift
    - LinuxMain.swift
    - TestHelpers.swift
    - shim.swift
    - AutomaticRuleTests.generated.swift

custom_rules:
    rule_id:
    included: Source/SwiftLintFramework/Rules/.+/\w+\.swift
    name: Rule ID
    message: Rule IDs must be all lowercase, snake case and not end with `rule`
    regex: identifier:\s*("\w+rule"|"\S*[^a-z]\S*")
    severity: error
    fatal_error:
    name: Fatal Error
    excluded: "Tests/*"
    message: Prefer using `queuedFatalError` over `fatalError` to avoid leaking compiler host machine paths.
    regex: \bfatalError\b
    match_kinds:
        - identifier
    severity: error
    rule_test_function:
    included: Tests/SwiftLintFrameworkTests/RulesTests.swift
    name: Rule Test Function
    message: Rule Test Function mustn't end with `rule`
    regex: func\s*test\w+(r|R)ule\(\)
    severity: error





force_cast: warning # implicitly
force_try:
    severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 110
    warning: 150
    error: 200
    ignores_function_declarations: true
    ignores_comments: true
    ignore_comment_only_lines: true
    ignores_urls: true
# they can set both implicitly with an array
type_body_length:
    - 300 # warning
    - 400 # error
# or they can set both explicitly
file_length:
    warning: 500
    error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names



function_body_length:
    warning: 300
    error: 500
function_parameter_count:
    warning: 6
    error: 8


cyclomatic_complexity:
    warning: 15
    error: 25

type_name:
    min_length: 4 # only warning
    max_length: # warning and error
    warning: 40
    error: 50
    excluded: iPhone # excluded via string


comment:
    comment_mark_space: true
    comment_mark: true
    minimum_length: 3
    required_swiftdocs:
    - class
    - func
    - enum


custom_rules:
todo_rule:
    name: "TODO Comment"
    regex: "(//\\s*TODO:).*"
    message: "TODO comments should be marked with a category (e.g., FIXME, TODO)."
    severity: error # You can adjust the severity as needed.


todo: TODO


reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, junit, html, emoji)


